import tkinter as tk
import random

# Costanti
GRID_WIDTH, GRID_HEIGHT = 10, 20
CELL_SIZE = 30
WIDTH, HEIGHT = GRID_WIDTH * CELL_SIZE, GRID_HEIGHT * CELL_SIZE
TICK_RATE = 150  # Tempo fisso per l'aggiornamento
SCORE_PER_BLOCK = 10
SCORE_PER_LINE = 100

# Tetromini
TETROMINOS = {
    'I': [[1, 1, 1, 1]],
    'O': [[1, 1],
          [1, 1]],
    'T': [[0, 1, 0],
          [1, 1, 1]],
    'L': [[1, 0],
          [1, 0],
          [1, 1]],
    'J': [[0, 1],
          [0, 1],
          [1, 1]],
    'S': [[0, 1, 1],
          [1, 1, 0]],
    'Z': [[1, 1, 0],
          [0, 1, 1]]
}

class Tetris:
    def _init_(self, root):
        self.root = root
        self.canvas = tk.Canvas(root, width=WIDTH, height=HEIGHT, bg='black')
        self.canvas.pack()
        self.score_label = tk.Label(root, text="Score: 0", font=("Arial", 14))
        self.score_label.pack()
        self.grid = [[0] * GRID_WIDTH for _ in range(GRID_HEIGHT)]
        self.current_tetromino = self.new_tetromino()
        self.tetromino_x, self.tetromino_y = 3, 0
        self.running = True
        self.score = 0
        self.schedule_update()
        self.root.bind("<Left>", self.move_left)
        self.root.bind("<Right>", self.move_right)
        self.root.bind("<Down>", self.move_down)
        self.root.bind("<Up>", self.rotate)
    
    def new_tetromino(self):
        return random.choice(list(TETROMINOS.values()))
    
    def draw_grid(self):
        self.canvas.delete("all")
        for y in range(GRID_HEIGHT):
            for x in range(GRID_WIDTH):
                if self.grid[y][x]:
                    self.canvas.create_rectangle(x * CELL_SIZE, y * CELL_SIZE, (x + 1) * CELL_SIZE, (y + 1) * CELL_SIZE, fill='blue', outline='black')
    
    def draw_tetromino(self):
        for y, row in enumerate(self.current_tetromino):
            for x, cell in enumerate(row):
                if cell:
                    self.canvas.create_rectangle((self.tetromino_x + x) * CELL_SIZE, (self.tetromino_y + y) * CELL_SIZE, (self.tetromino_x + x + 1) * CELL_SIZE, (self.tetromino_y + y + 1) * CELL_SIZE, fill='red', outline='black')
    
    def move_left(self, event):
        if not self.collision(-1, 0):
            self.tetromino_x -= 1
        self.refresh()
    
    def move_right(self, event):
        if not self.collision(1, 0):
            self.tetromino_x += 1
        self.refresh()
    
    def move_down(self, event=None):
        if not self.collision(0, 1):
            self.tetromino_y += 1
        else:
            self.lock_tetromino()
        self.refresh()
    
    def rotate(self, event):
        rotated = list(zip(*self.current_tetromino[::-1]))
        if not self.collision(0, 0, rotated):
            self.current_tetromino = rotated
        self.refresh()
    
    def collision(self, dx, dy, shape=None):
        if shape is None:
            shape = self.current_tetromino
        for y, row in enumerate(shape):
            for x, cell in enumerate(row):
                if cell:
                    new_x, new_y = self.tetromino_x + x + dx, self.tetromino_y + y + dy
                    if new_y >= GRID_HEIGHT or new_x < 0 or new_x >= GRID_WIDTH or self.grid[new_y][new_x]:
                        return True
        return False
    
    def lock_tetromino(self):
        for y, row in enumerate(self.current_tetromino):
            for x, cell in enumerate(row):
                if cell:
                    self.grid[self.tetromino_y + y][self.tetromino_x + x] = 1
        self.score += SCORE_PER_BLOCK
        self.clear_lines()
        self.current_tetromino = self.new_tetromino()
        self.tetromino_x, self.tetromino_y = 3, 0
        if self.collision(0, 0):  # Game Over
            self.running = False
        self.update_score()
    
    def clear_lines(self):
        new_grid = [row for row in self.grid if not all(row)]
        cleared_lines = GRID_HEIGHT - len(new_grid)
        self.grid = [[0] * GRID_WIDTH for _ in range(cleared_lines)] + new_grid
        self.score += cleared_lines * SCORE_PER_LINE
    
    def update_score(self):
        self.score_label.config(text=f"Score: {self.score}")
    
    def refresh(self):
        self.draw_grid()
        self.draw_tetromino()
    
    def schedule_update(self):
        if self.running:
            self.move_down()
            self.root.after(TICK_RATE, self.schedule_update)

root = tk.Tk()
tetris = Tetris(root)
root.mainloop()
